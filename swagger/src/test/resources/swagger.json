{
  "swagger": "2.0",
  "info": {
    "title": "Swagger Sample App",
    "version": "1.0.0",
    "description": "This is a sample server Petstore server.  You can find out more about Swagger \n    at <a href=\"http://swagger.wordnik.com\">http://swagger.wordnik.com</a> or on irc.freenode.net, #swagger.",
    "termsOfService": "http://helloreverb.com/terms/",
    "contact": {
      "name": "apiteam@wordnik.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "StoreApi",
      "description": "Operations about store"
    },
    {
      "name": "UserApi",
      "description": "Operations about user"
    },
    {
      "name": "PetsApi",
      "description": "Operations about pets"
    }
  ],
  "paths": {
    "/store/order": {
      "post": {
        "operationId": "placeOrder",
        "tags": [
          "StoreApi"
        ],
        "summary": "Place an order for a pet",
        "parameters": [
          {
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response"
          },
          "400": {
            "description": "Invalid order"
          }
        }
      }
    },
    "/pet/findByTags": {
      "get": {
        "operationId": "findPetsByTags",
        "tags": [
          "PetsApi"
        ],
        "summary": "Finds Pets by tags",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "tags",
            "description": "Tags to filter by",
            "required": true,
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "delete": {
        "operationId": "deleteOrder",
        "tags": [
          "StoreApi"
        ],
        "summary": "Delete purchase order by ID",
        "parameters": [],
        "responses": {
          "200": {
            "description": "No response"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "get": {
        "operationId": "getOrderById",
        "tags": [
          "StoreApi"
        ],
        "summary": "Find purchase order by ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user/": {
      "post": {
        "operationId": "createUser",
        "tags": [
          "UserApi"
        ],
        "summary": "",
        "parameters": [],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/pet/{petId}": {
      "delete": {
        "operationId": "deletePet",
        "tags": [
          "PetsApi"
        ],
        "summary": "Deletes a pet",
        "parameters": [
          {
            "name": "petId",
            "description": "Pet id to delete",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response"
          },
          "400": {
            "description": "Invalid pet value"
          }
        }
      },
      "get": {
        "operationId": "getPetById",
        "tags": [
          "PetsApi"
        ],
        "summary": "Find pet by ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "petId",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": {
          "oauth2": [
            "PUBLIC"
          ]
        }
      }
    },
    "/pet/findByStatus": {
      "get": {
        "operationId": "findPetsByStatus",
        "tags": [
          "PetsApi"
        ],
        "summary": "Finds Pets by status",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "status",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "defaultValue": "available",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/pet/": {
      "post": {
        "operationId": "addPet",
        "tags": [
          "PetsApi"
        ],
        "summary": "Add a new pet to the store",
        "parameters": [
          {
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "operationId": "updatePet",
        "tags": [
          "PetsApi"
        ],
        "summary": "Update an existing pet",
        "parameters": [
          {
            "name": "body",
            "description": "Pet object that needs to be updated in the store",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    }
  },
  "definitions": {
    "Pet": {
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "photoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/Category"
        }
      }
    },
    "Category": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Error": {
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "User": {
      "properties": {
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "phone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Order": {
      "properties": {
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "http://localhost:8002/oauth/dialog",
      "scopes": {
        "PUBLIC": "PUBLIC"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "apiKey",
      "in": "header"
    }
  }
}